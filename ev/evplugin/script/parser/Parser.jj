options
  {
  LOOKAHEAD = 3;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
  }

PARSER_BEGIN(Parser)
package evplugin.script.parser;
import evplugin.script.*;
import java.util.*;
public class Parser
	{
	}
PARSER_END(Parser)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SKIP : {" "}
SKIP : {"\n" | "\r" | "\r\n"}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TOKEN : { < SYM : (["a"-"z"])+> } 

TOKEN : { < STRING : 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >}

TOKEN : { < INFIX : (["+","-","*","/","%","&","|","#","!"])+ > } 
TOKEN : { < INTEGER : (["0"-"9"])+ > } 
TOKEN : { < REAL    : (["0"-"9"])*"."(["0"-"9"])+ | (["0"-"9"])+"."(["0"-"9"])* > } 

TOKEN : { < OPEN_PAR : "(" > } 
TOKEN : { < CLOSE_PAR : ")" > } 

TOKEN : { < OPEN_LIST : "[" > } 
TOKEN : { < CLOSE_LIST : "]" > } 

TOKEN : { < COMMA : "," > } 

//TOKEN : { < WHITESPACE1 : ([" ","\t"])+ > } 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp Input() :
{
	Exp e;
}
{
	e=Applic()
	<EOF>
	{return e;}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp Applic() :
{
	Exp e;
}
{
	(
		LOOKAHEAD(30) //which unit? rules or symbols? this might not work.
		e=InfixOp()
	|
		e=NormalOp()
	)
	{return e;}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp ApplicSym() :
{
	Exp e;
}
{
	(
		e=SingleOp()
	|
		<OPEN_PAR>
		e=Applic()
		<CLOSE_PAR>
	)
	{return e;}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp InfixOp() :
{
	ExpApp e=new ExpApp();
	Exp arg1, arg2;
	Token t;
}
{
	arg1=ApplicSym()
	t=<INFIX>
	(
		arg2=InfixOp() //priority todo
	|
		arg2=ApplicSym()
	)
	{
	ExpSym esym=new ExpSym();
	}{
	esym.sym=t.image;
	e.expr.add(esym);
	e.expr.add(arg1);
	e.expr.add(arg2);
	return e;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp NormalOp() :
{
	ExpApp e=new ExpApp();
	Exp ne;
}
{
	(
		ne=ApplicSym()
		{e.expr.add(ne);}
	)+
	{return e;}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp SingleOp() :
{
	Token t;
	Exp le;
}
{
	(
		t=<SYM>
		{
		ExpSym e=new ExpSym();
		e.sym=t.image;
		return e;
		}
	|
		t=<STRING>
		{
		String s=t.image.substring(1);
		return new ExpVal(s.substring(0, s.length()-1));
		}
	|
		t=<INTEGER>
		{
		return new ExpVal(Integer.parseInt(t.image));
		}
	|
		t=<REAL>
		{
		return new ExpVal(Double.parseDouble(t.image));
		}
	|
		(
			<OPEN_LIST>
			{Vector<Exp> list=new Vector<Exp>();}
			[
				le=ApplicSym()
				{list.add(le);}
				(
					<COMMA>
					le=ApplicSym()
					{list.add(le);}
				)*
				
			]
			<CLOSE_LIST>
			{
			ExpVal e=new ExpVal();
			e.o=list;
			return e;
			}
		)
	)
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Exp MatchedBraces() :
{
	Exp e;
}
{
	<OPEN_PAR>
		e=Applic()
	<CLOSE_PAR>
	{return e;}
}

